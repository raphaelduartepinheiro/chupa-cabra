#!/usr/bin/env node
import Q from 'q';
import fs from 'fs';
import http from 'http';
import prompt from 'prompt';
import checkUpdate from 'check-update';
import pkg from '../package.json';

prompt.start();
prompt.message = '';
prompt.delimiter = '\"'.magenta;

const body = [];

const doRequest = function (protocol, url, partialBody, body, index, deferred) {
  protocol.get(url, function (res) {
    res.setEncoding('utf8');
    res.on('data', function (chunk) {
      partialBody += chunk;
    });
    res.on('end', function () {
      console.log(url + ' => âˆš Done'.green);
      body[index] += partialBody;
      deferred.resolve();
    });
  });
};

const getBody = function (url) {
  const deferred = Q.defer(),
      partialBody = '',
      index = body.length;

  body[index] = index === 0 ? 'Dump generated by chupa-cabra (version: ' + pkg.version +'): \n\n---- ' + url + ' ---- \n\n' : '\n\n---- ' + url + ' ---- \n\n';

  if (exports.isHttp(url)) {
    doRequest(http, url, partialBody, body, index, deferred);
  } else if (exports.isHttps(url)) {
    doRequest(https, url, partialBody, body, index, deferred);
  } else {
    url = exports.forceHttp(url);
    doRequest(http, url, partialBody, body, index, deferred);
  }

  return deferred.promise;
};

exports.generateLoop = function (from, to, by) {
  const result = [];
  for (let i = from; i <= to; i += by) {
    result.push(i);
  }

  return result;
};

const doLoop = function (from, to, by, url) {
  const originalUrl = url,
      promises = [],
      loop = exports.generateLoop(from, to, by);

  loop.forEach(function (n) {
    url = originalUrl.replace(/\[\d*,\d*,\d*\]/, n);
    promises.push(getBody(url));
  });

  return Q.allSettled(promises);
};

exports.validateURL = function (url) {
  try {
    return url.match(/(http(s)?:\/\/)?\w*(\.(\w)+)+(\W\d+)?(\/*\w*\W*)*/g)
      .toString().length == url.length;
  } catch (err) {
    return false;
  }
};

// TODO: Requests with intervals
// exports.timeout = function(seconds){

// };

exports.isHttp = function (url) {
  return url.match(/^http:\/\//) !== null;
};

exports.isHttps = function (url) {
  return url.match(/^https:\/\//) !== null;
};

exports.forceHttp = function (url) {
  return 'http://' + url;
};

const getExpression = function (url) {
  return url.match(/\[\d*,\d*,\d*\]/);
};

exports.expressionExists = function (url) {
  return getExpression(url) !== null;
};

const getLoop = function (url) {
  let result = getExpression(url).toString().replace(/\[|\]/g, '').split(',');
  result = [parseInt(result[0]), parseInt(result[1]), parseInt(result[2])];

  return result;
};

const questionsSequenceOne = [{
    name: 'url',
    description: 'Please, enter the URL endpoint you want to dump',
    required: true,
    message: 'Insert a valid URL.',
    conform: function(url){
      return exports.validateURL(url);
    }
  },
  // TODO: Requests with intervals
  // {
  //     name: 'interval',
  //     patterns: '[yYnN]',
  //     message: 'Choose Yes or No for the question.',
  //     description: 'Do you want the requisitions make intervals? (y/N)',
  //     default: 'N'
  // }
];

// TODO: Requests with intervals
// const questionsSequenceTwo = {
//   name: 'seconds',
//   description: 'Enter the interval in seconds',
//   default: 20
// };

const writeToFile = function (buffer) {
  fs.writeFile('dump_' + Date.parse(new Date()) + '.txt', buffer, function () {
    console.log('dump.txt generated succesfully!'.green);
  });
};

prompt.get(questionsSequenceOne, function (err, result) {
  if (result !== undefined) {
    const url = result.url;
    let fullBody = '';

    checkUpdate({packageName: pkg.name, packageVersion: pkg.version, isCLI: true}, function (err, latestVersion, defaultMessage) {
        if (!err) {
          console.log(defaultMessage);
        }
    });

    if (exports.expressionExists(url)) {
      const loop = getLoop(url);

      // const loopArray = doLoop(loop[0], loop[1], loop[2], url).then(function () { --never used yet--
      doLoop(loop[0], loop[1], loop[2], url).then(function () {
        // const len = body.length; --never used yet--
        body.forEach(function (content) {
          fullBody += content;
        });

        writeToFile(fullBody);
        console.log('The loop was: '.green, loop);
      });
    } else {
      getBody(url).then(function () {
        writeToFile(body[0]);
      });
    }

    // TODO: Requests with intervals
    // if (result.interval.match(/[Yy]/))
    //   prompt.get(questionsSequenceTwo, function(err, result){
    //     const seconds = result.seconds;
    //   })
  }
});
